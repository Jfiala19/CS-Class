#10/8/18, Jack Fiala, Minesweeper https://stackoverflow.com/questions/19063114/split-an-input-into-two-python-3 OMH
import random
while True: #this loop while force the user to select a legimate game mode
	cvb = (input("\n\nHi and Welcome to Minsweeper! \n\nFlag all the mines and clear all the spaces to win. \n\nPlease select the level you want to play at:\n\nFor Easy (3 by 3 board, 1 bomb) Type E\nFor Medium (5 by 5 board, 3 bombs) Type M\nFor Hard (8 by 8 board, 8 bombs) Type H\nFor Custom Settings Type C\n>>>")).lower()
	if cvb == "e": #pre-determined setups
		w,h,b =3,3,1
		break
	if cvb == "m":
		w,h,b = 5,5,3
		break
	if cvb == "h":
		w,h,b = 8,8,8
		break
	if cvb == "c": #custom settings
		while True: #to avoid errors with entering letters
			try:
				w,h,b = input("Enter Width, Height, and Number of Bombs, all seperated by spaces.\n\n>>").split()
				w,h,b = int(w), int(h), int(b)
				if b < (w*h):
					break
				else:
					print("\nPlease print an amount of bombs that will fit in the board.\n")
			except ValueError:
				print("\nEnter numbers please.\n")
		break
board = [[0]*(w+2) for x in range(h+2)] #makes larger gameboard with a cushion of zeros all the way around for when searching for bombs with edge guys
lop = 0 #counter variable
def printb(board): #function for printing baords nicely
	for x in board[1:h+1]:
		print(*x[1:w+1])
def yet(space): #check to see if space nearby is a bomb: if not a bomb, adds 1, if it is a bomb, adds "", which is bascially nothing
	if space == "*":
		return ""
	else:
		return 1
def checker(x, y): #different options for spaces near a zero
	if board[y][x] == 0 and board2[y][x] == "X": #if space next to a zero is also a zero and unrevealed, searches for more nearby zeros via recursion
		board2[y][x] = 0
		ik(x, y)
		return 0
	elif board2[y][x] != "X": #if space is already revealed, keep it at the spaces value
		return board[y][x]
	elif board[y][x] != (0 or "*") and board2[y][x] == "X": #if space is a nonzero # and display is unrevealed, reveal it
		return board[y][x] 
	elif board[y][x] == "*" and board2[y][x] == "X": #if space is bomb and unrevealed, keep unrevealed
		return "X"
def Finisher(board, board2, w, h):
	reach = 0 #varaible
	for d in range(h): 
		for x in range(w):
			if (board[d+1][x+1] == board2[d+1][x+1]) or (board[d+1][x+1] == "*" and board2[d+1][x+1] == "F"): #goes through every space on board (not including edges). if spaces are =, or bombs are flaged, adds to variable
				reach += 1
	return reach #if all spaces are = and bombs flagged, this varaible should equal w*h
def ik(x, y): #goes through all nearby spaces
	for q in range(-1, 2):
		for r in range(-1, 2):
			if q == 0 and r == 0: #ignores original space
				pass
			else:
				board2[y+q][r+x] = checker((r+x), (y+q))
while lop <  b: #rather than just using x in range(b), the counter will only go up when a bomb is placed in a new spot, esnuring the right number of bombs
	z, y = random.randint(0, (w-1)), random.randint(0, (h-1))  #give a random width and height for bomb w/in inner board
	if board[y+1][z+1] != "*":
		board[y+1][z+1] = "*"
		for q in range(-1, 2): #goes through every board space nearby
			for r in range(-1, 2):
				if q == 0 and r == 0: #if itts the space itself, skips it
					pass
				else:
					board[y+q+1][r+z+1] += yet(board[y+q+1][r+z+1]) #checks to see if bomb, if not, adds 1
		lop +=1 #counter variable up after successful bomb placement
board2 = [["X"]*(w+2) for x in range(h+2)] #creates another board for gameplay revealing. Starts with all Xs
for x in range(w+2): #sets all edges =1 on original board so when clearing bonus zeros doesn't get messed up
	board[0][x] = 1
	board[-1][x] = 1
for x in range(h+2): #^^^
	board[x][0] = 1
	board[x][-1] = 1
while Finisher(board, board2, w, h) != (w*h): #while board not solved, asks you to clear/flag
	print("\n")
	printb(board2) #print current state
	print("\n")
	while True: #input guess coordinates, along with move type. Only excepts numbers for the first 2 inputs
		try:
			x,y,m = input("Type X Coord, Y Coord, then Clear or Flag (C/F) space, all seperated by spaces.\n\n>>").split()
			x,y = int(x), int(y)
			if 0<x<=w and 0<y<=h:
				break
			else:
				print("\nPlease enter numbers within the range of the board.\n")
		except ValueError:
			print("\nEnter numbers please.\n")

	if m == "F": #if move is a flag, flag that space
		board2[y][x] = "F"
	else: #if move is to clear
		if board[y][x] == "*": #if space is bomb, game over
			print("\nYou Exploded\n\nSolution:\n")
			printb(board)
			exit()
		elif board[y][x] != 0: #if space nonzero, reveal it 
			board2[y][x] = board[y][x]
		else: #if space is zero, reveal it, along with revealing all nearby zeros and contingous nonzeros
			board2[y][x] = board[y][x]
			ik(x, y) #function for revealing bonus spaces
print("\nYou Win!!\n\nSolution:\n")
printb(board)
print("\n")
exit()